{
  "name": "Enhanced Email Automation Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lead-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Lead Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "lead-email-automation"
    },
    {
      "parameters": {
        "jsCode": "// Extract and process lead data from webhook\nconst webhookData = $input.first().json;\nconst lead = webhookData.lead;\nconst doctor = webhookData.doctor;\nconst quizData = webhookData.quiz_data;\n\n// Set workflow variables for easy access\n$vars.set('leadId', lead.id);\n$vars.set('leadName', lead.name);\n$vars.set('leadEmail', lead.email);\n$vars.set('leadPhone', lead.phone);\n$vars.set('quizType', lead.quiz_type);\n$vars.set('quizScore', lead.score);\n$vars.set('leadSource', lead.lead_source || 'website');\n$vars.set('submittedAt', lead.submitted_at);\n\n// Doctor information\n$vars.set('doctorName', doctor?.name || 'Dr. Smith');\n$vars.set('doctorEmail', doctor?.email);\n$vars.set('clinicName', doctor?.clinic_name || 'Medical Practice');\n$vars.set('clinicLocation', doctor?.location || '');\n\n// Communication preferences\n$vars.set('shouldSendWelcomeEmail', !!lead.email);\n$vars.set('shouldNotifyDoctor', !!doctor?.email);\n$vars.set('shouldSendFollowUp', true);\n\n// Generate email content\nconst welcomeEmailSubject = `Your ${quizType} Assessment Results - ${clinicName}`;\nconst welcomeEmailHtml = generateWelcomeEmail(lead, doctor, quizData);\n\nconst doctorNotificationSubject = `New Lead: ${leadName} - ${quizType} Assessment`;\nconst doctorNotificationHtml = generateDoctorNotificationEmail(lead, doctor, quizData);\n\n// Return structured data for next nodes\nreturn {\n  lead,\n  doctor,\n  quizData,\n  emails: {\n    welcome: {\n      to: lead.email,\n      subject: welcomeEmailSubject,\n      html: welcomeEmailHtml,\n      type: 'welcome'\n    },\n    doctorNotification: {\n      to: doctor?.email,\n      subject: doctorNotificationSubject,\n      html: doctorNotificationHtml,\n      type: 'doctor_notification'\n    }\n  },\n  communicationFlags: {\n    welcomeEmail: !!lead.email,\n    doctorNotification: !!doctor?.email,\n    followUp: true\n  }\n};\n\nfunction generateWelcomeEmail(lead, doctor, quizData) {\n  const severity = getSeverityLevel(lead.score, quizData);\n  const severityColor = getSeverityColor(severity);\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Assessment Results</title>\n      <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #2563eb; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n        .content { background: #f8fafc; padding: 20px; border-radius: 0 0 8px 8px; }\n        .score-box { background: white; padding: 15px; border-radius: 8px; margin: 20px 0; text-align: center; }\n        .severity-badge { display: inline-block; padding: 8px 16px; border-radius: 20px; color: white; font-weight: bold; }\n        .cta-button { display: inline-block; background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n        .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>Assessment Complete!</h1>\n          <p>Thank you for completing the ${lead.quiz_type} assessment</p>\n        </div>\n        \n        <div class=\"content\">\n          <h2>Hello ${lead.name},</h2>\n          \n          <p>We've received your assessment results and are reviewing them carefully.</p>\n          \n          <div class=\"score-box\">\n            <h3>Your Assessment Score</h3>\n            <div style=\"font-size: 48px; font-weight: bold; color: #2563eb; margin: 10px 0;\">\n              ${lead.score}\n            </div>\n            <div class=\"severity-badge\" style=\"background: ${severityColor};\">\n              ${severity.toUpperCase()}\n            </div>\n          </div>\n          \n          <p><strong>What happens next?</strong></p>\n          <ul>\n            <li>Dr. ${doctor?.name || 'Smith'} will review your results</li>\n            <li>You'll receive a follow-up call within 24 hours</li>\n            <li>We'll discuss your treatment options and next steps</li>\n          </ul>\n          \n          <p><strong>Need immediate assistance?</strong></p>\n          <p>If you have urgent questions or concerns, please call us directly.</p>\n          \n          <a href=\"tel:${doctor?.phone || ''}\" class=\"cta-button\">Call Now</a>\n        </div>\n        \n        <div class=\"footer\">\n          <p>This email was sent to ${lead.email}</p>\n          <p>Â© ${new Date().getFullYear()} ${doctor?.clinic_name || 'Medical Practice'}. All rights reserved.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nfunction generateDoctorNotificationEmail(lead, doctor, quizData) {\n  const severity = getSeverityLevel(lead.score, quizData);\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>New Lead Notification</title>\n      <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #dc2626; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n        .content { background: #f8fafc; padding: 20px; border-radius: 0 0 8px 8px; }\n        .lead-info { background: white; padding: 15px; border-radius: 8px; margin: 20px 0; }\n        .urgent { border-left: 4px solid #dc2626; }\n        .cta-button { display: inline-block; background: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ðŸš¨ New Lead Alert</h1>\n          <p>Patient assessment completed</p>\n        </div>\n        \n        <div class=\"content\">\n          <h2>New Patient Assessment</h2>\n          \n          <div class=\"lead-info\">\n            <h3>Patient Information</h3>\n            <p><strong>Name:</strong> ${lead.name}</p>\n            <p><strong>Assessment:</strong> ${lead.quiz_type}</p>\n            <p><strong>Score:</strong> ${lead.score}</p>\n            <p><strong>Severity:</strong> <span style=\"color: ${getSeverityColor(severity)}; font-weight: bold;\">${severity.toUpperCase()}</span></p>\n            <p><strong>Submitted:</strong> ${new Date(lead.submitted_at).toLocaleString()}</p>\n          </div>\n          \n          <div class=\"lead-info\">\n            <h3>Contact Information</h3>\n            <p><strong>Phone:</strong> <a href=\"tel:${lead.phone}\">${lead.phone}</a></p>\n            <p><strong>Email:</strong> <a href=\"mailto:${lead.email}\">${lead.email}</a></p>\n            <p><strong>Source:</strong> ${lead.lead_source}</p>\n          </div>\n          \n          <p><strong>Action Required:</strong> Please contact this patient within 24 hours.</p>\n          \n          <a href=\"tel:${lead.phone}\" class=\"cta-button\">Call Patient Now</a>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nfunction getSeverityLevel(score, quizData) {\n  if (!quizData || !quizData.maxScore) return 'normal';\n  const percentage = (score / quizData.maxScore) * 100;\n  \n  if (percentage >= 80) return 'severe';\n  if (percentage >= 60) return 'moderate';\n  if (percentage >= 40) return 'mild';\n  return 'normal';\n}\n\nfunction getSeverityColor(severity) {\n  switch (severity) {\n    case 'severe': return '#dc2626';\n    case 'moderate': return '#ea580c';\n    case 'mild': return '#ca8a04';\n    default: return '#059669';\n  }\n}"
      },
      "id": "process-lead-data",
      "name": "Process Lead Data & Generate Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $vars.get('shouldSendWelcomeEmail') }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-welcome-email",
      "name": "Should Send Welcome Email?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $vars.get('shouldNotifyDoctor') }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-doctor-notification",
      "name": "Should Notify Doctor?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{ $env.SUPABASE_URL }}/functions/v1/send-email",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.emails.welcome.to }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.emails.welcome.subject }}"
            },
            {
              "name": "html",
              "value": "={{ $json.emails.welcome.html }}"
            },
            {
              "name": "from",
              "value": "noreply@patientpathway.com"
            }
          ]
        }
      },
      "id": "send-welcome-email",
      "name": "Send Welcome Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{ $env.SUPABASE_URL }}/functions/v1/send-email",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.emails.doctorNotification.to }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.emails.doctorNotification.subject }}"
            },
            {
              "name": "html",
              "value": "={{ $json.emails.doctorNotification.html }}"
            },
            {
              "name": "from",
              "value": "noreply@patientpathway.com"
            }
          ]
        }
      },
      "id": "send-doctor-notification",
      "name": "Send Doctor Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "jsCode": "// Collect all email sending results\nconst results = [];\nconst errors = [];\n\n// Process welcome email result\nif ($input.all()[0]?.json?.success) {\n  results.push({\n    type: 'welcome_email',\n    status: 'sent',\n    recipient: $vars.get('leadEmail'),\n    emailId: $input.all()[0]?.json?.data?.id || 'unknown'\n  });\n} else {\n  errors.push({\n    type: 'welcome_email',\n    status: 'failed',\n    recipient: $vars.get('leadEmail'),\n    error: $input.all()[0]?.json?.error || 'Unknown error'\n  });\n}\n\n// Process doctor notification result\nif ($input.all()[1]?.json?.success) {\n  results.push({\n    type: 'doctor_notification',\n    status: 'sent',\n    recipient: $vars.get('doctorEmail'),\n    emailId: $input.all()[1]?.json?.data?.id || 'unknown'\n  });\n} else {\n  errors.push({\n    type: 'doctor_notification',\n    status: 'failed',\n    recipient: $vars.get('doctorEmail'),\n    error: $input.all()[1]?.json?.error || 'Unknown error'\n  });\n}\n\n// Create comprehensive summary\nconst summary = {\n  leadId: $vars.get('leadId'),\n  leadName: $vars.get('leadName'),\n  timestamp: new Date().toISOString(),\n  emailsSent: results.length,\n  emailsFailed: errors.length,\n  totalEmails: results.length + errors.length,\n  results,\n  errors,\n  success: errors.length === 0\n};\n\nconsole.log('Email automation completed:', summary);\nreturn summary;"
      },
      "id": "log-email-results",
      "name": "Log Email Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "insert",
        "table": "lead_communications",
        "columns": "lead_id,communication_type,message,status,metadata",
        "values": "={{ $vars.get('leadId') }},email_automation,{{ JSON.stringify($json) }},{{ $json.success ? 'completed' : 'partial_failure' }},{{ JSON.stringify({ workflow: 'n8n-email-automation', timestamp: new Date().toISOString(), emailsSent: $json.emailsSent, emailsFailed: $json.emailsFailed }) }}"
      },
      "id": "save-to-database",
      "name": "Save Communication Log",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $vars.get('shouldSendFollowUp') }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-follow-up",
      "name": "Should Send Follow-up?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 600]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{ $env.SUPABASE_URL }}/functions/v1/send-email",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $vars.get('leadEmail') }}"
            },
            {
              "name": "subject",
              "value": "Follow-up: Your {{ $vars.get('quizType') }} Assessment"
            },
            {
              "name": "html",
              "value": "<h2>Follow-up on Your Assessment</h2><p>Hi {{ $vars.get('leadName') }},</p><p>We hope you're doing well. This is a friendly follow-up regarding your {{ $vars.get('quizType') }} assessment.</p><p>If you haven't heard from us yet, please expect a call within the next 24 hours.</p><p>Best regards,<br>The {{ $vars.get('clinicName') }} Team</p>"
            },
            {
              "name": "from",
              "value": "noreply@patientpathway.com"
            }
          ]
        }
      },
      "id": "send-follow-up-email",
      "name": "Send Follow-up Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 600]
    }
  ],
  "connections": {
    "Lead Webhook": {
      "main": [
        [
          {
            "node": "Process Lead Data & Generate Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Lead Data & Generate Emails": {
      "main": [
        [
          {
            "node": "Should Send Welcome Email?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should Notify Doctor?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should Send Follow-up?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Send Welcome Email?": {
      "main": [
        [
          {
            "node": "Send Welcome Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Notify Doctor?": {
      "main": [
        [
          {
            "node": "Send Doctor Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Send Follow-up?": {
      "main": [
        [
          {
            "node": "Send Follow-up Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Welcome Email": {
      "main": [
        [
          {
            "node": "Log Email Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Doctor Notification": {
      "main": [
        [
          {
            "node": "Log Email Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Send Follow-up Email": {
      "main": [
        [
          {
            "node": "Log Email Results",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Log Email Results": {
      "main": [
        [
          {
            "node": "Save Communication Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "email-automation",
      "name": "Email Automation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
